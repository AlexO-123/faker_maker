{
  
  "0": {
    "title": "Arrays",
    "content": "Arrays . It is possible to declare an attribute as having multiple values. . FakerMaker.factory :basket do items( has: 10 ) { Faker::Commerce.product_name } end . or to pick random number of attributes from a range: . FakerMaker.factory :basket do items( has: 5..20 ) { Faker::Commerce.product_name } end . A range always generates an array, even if the range produces 1 items or the range is 0..1. . It is possible to force an attribute to always be an array, even if only produces one item. . FakerMaker.factory :basket do items( array: true ) { Faker::Commerce.product_name } end . You can always use long-form block syntax… . FakerMaker.factory :basket do items has: 5..20 do Faker::Commerce.product_name end end .",
    "url": "http://localhost:4000/usage/arrays.html",
    "relUrl": "/usage/arrays.html"
  }
  ,"1": {
    "title": "Building Instances",
    "content": "Building Instances . Instances are Plain Ol’ Ruby Objects and the attributes are attached with getters and setters with their values assigned to the value return from their block at build time. . To build an object: . result = FakerMaker[:basket].build . will generate a new instance using the Basket factory. Because an actual class is defined, you can instantiate an object directly through Basket.new but that will not populate any of the attributes. . It’s possible to override attributes at build-time, either by passing values as a hash: . result = FakerMaker[:item].build( name: &#39;Electric Blanket&#39; ) . or by passing in a block: . result = FakerMaker[:item].build{ |i| i.name = &#39;Electric Sheep&#39; } . this is particularly useful for overriding nested values, since all the getters and setters of the embedded objects are already constructed: . result = FakerMaker[:basket].build do |b| b.items.first.name = &#39;Neon Badger&#39; end . if you’re crazy enough to want to do both styles during creation, the values in the block will be preserved, e.g. . result = FakerMaker[:item].build( name: &#39;Electric Blanket&#39; ) do |i| i.name = &#39;Electric Sheep&#39; end . then the value of result.name is ‘Electric Sheep’. . Beware when overriding values in this way: there is no type checking. You will get an exception if you try to set a value to an attribute that doesn’t exist but you won’t get one if you assign, say, an array of values where you would otherwise have a string and vice versa. . Calling result.to_json will give a stringified JSON representation. Because ActiveSupport is used under the covers, as_json will give you a Hash rather than the stringified version. . As a convenience, you can request a JSON representation directly: . result = FakerMaker[:basket].to_json . As another convenience, FakerMaker is also assigned to the variable FM to it is possible to write just: . result = FM[:basket].build .",
    "url": "http://localhost:4000/usage/building_instances.html",
    "relUrl": "/usage/building_instances.html"
  }
  ,"2": {
    "title": "Contributing",
    "content": "Contributing . Bug reports and pull requests are welcome on GitHub at https://github.com/BillyRuffian/faker_maker. .",
    "url": "http://localhost:4000/contributing.html",
    "relUrl": "/contributing.html"
  }
  ,"3": {
    "title": "Credits",
    "content": "Extra Credit . Unipug logo by 1smr1 from Pixabay. .",
    "url": "http://localhost:4000/credits.html",
    "relUrl": "/credits.html"
  }
  ,"4": {
    "title": "Managing Dependencies",
    "content": "Managing Dependencies . Factory definition files are Plain Ol’ Ruby. If you depend on another factory because you either extend from it or use it just add a require or (depending on your load path) require_relative to the top of your file. .",
    "url": "http://localhost:4000/usage/dependencies.html",
    "relUrl": "/usage/dependencies.html"
  }
  ,"5": {
    "title": "Embedding Factories",
    "content": "Embedding Factories . To use factories with factories, the following pattern is recommended: . FakerMaker.factory :item do name { Faker::Commerce.product_name } price { Faker::Commerce.price } end FakerMaker.factory :basket do items( has: 10 ) { FakerMaker[:item].build } end . You might have to manage your dependencies and require your referenced factory. .",
    "url": "http://localhost:4000/usage/embedding_factories.html",
    "relUrl": "/usage/embedding_factories.html"
  }
  ,"6": {
    "title": "Usage",
    "content": "Usage . FakerMaker generates factories that build disposable objects for testing. Each factory has a name and a set of attributes. . FakerMaker.factory :user do name {&#39;Patsy Stone&#39;} email {&#39;patsy@fabulous.co.uk&#39;} admin {false} end . This will generate a User class with the attributes name, email and admin which will always return the same value. . It is possible to explicitly set the name of class which is particularly useful if there is a risk of redefining an existing one. . FakerMaker.factory :user, class: &#39;EmailUser&#39; do name {&#39;Patsy Stone&#39;} email {&#39;patsy@fabulous.co.uk&#39;} admin {false} end . The class name will always be turned into a Ruby-style class name so email_user would become EmailUser. . Because of the block syntax in Ruby, defining attributes as Hashes requires two sets of curly brackets: . FakerMaker.factory :response do body { { title: &#39;First Post&#39;, content: &#39;This is part of a hash&#39; } } end . Blocks are executed in the context of their instance. This means you can refer to variables already defined: . FakerMaker.factory :user, class: &#39;EmailUser&#39; do title {&#39;Ms&#39;} name {&#39;Patsy Stone&#39;} formal_name {&quot;#{title} #{name}&quot;} email {&#39;patsy@fabulous.co.uk&#39;} admin {false} end .",
    "url": "http://localhost:4000/usage/",
    "relUrl": "/usage/"
  }
  ,"7": {
    "title": "Home",
    "content": "Factories over fixtures . FakerMaker is a simple factory builder so you can throw away your fixtures and generate test data instead. . . Sometimes you need generate data; something testers need to do a lot. Often, a bunch of fixtures will be built by hand, carefully maintained and curated, until the API or schema or something changes and all the fixtures need to be pruned before the tests pass again. This drives testers into building fixtures which individually cover lots of acceptance critera just so that they can drive down the number of them they have to maintain until the fixtures don’t resemble anything like realistic criteria. . If you’re testing a Rails application, you can use the awesome FactoryBot to generate faked model instances but what if you’re not using Rails or you don’t have model classes or you’re testing an API? This is what Faker Maker aims to help with. . It is designed to resemble the Factory Bot gem but without needing an existing class definition to back its object and so it goes without saying that it offers no persistence mechanism. Its purpose is to provide a simple framework for generating data to test JSON APIs and is intended to be used with the Faker gem (but has no dependency upon it). .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"8": {
    "title": "Inheritance",
    "content": "Inheritance . FakerMaker can exploit the Ruby class hierarchy to provide additional specialisation or to override some behaviours: . FakerMaker.factory :vehicle do wheels { 4 } colour { Faker::Color.color_name } engine_capacity { rand( 600..2500 ) } end FakerMaker.factory :motorbike, parent: :vehicle do wheels { 2 } sidecar { [true, false].sample } end . This is the equivalent of: . class Vehicle &lt; Object # ... end class Motorbike &lt; Vehicle # ... end . so a motorbike will still have a colour and engine capacity between 600 and 2500. .",
    "url": "http://localhost:4000/usage/inheritance.html",
    "relUrl": "/usage/inheritance.html"
  }
  ,"9": {
    "title": "Installation",
    "content": "Installation . Add this line to your application’s Gemfile: . gem &#39;faker_maker&#39; . And then execute: . $ bundle . Or install it yourself as: . $ gem install faker_maker .",
    "url": "http://localhost:4000/installation.html",
    "relUrl": "/installation.html"
  }
  ,"10": {
    "title": "JSON Field Names",
    "content": "JSON Field Names . JavaScript likes to use camelCase, Ruby’s idiom is to use snake_case. This can make make manipulating factory-built objects in ruby ugly. To avoid this, you can call your fields one thing and ask the JSON outputter to rename the field when generating JSON. . FakerMaker.factory :vehicle do wheels { 4 } colour { Faker::Color.color_name } engine_capacity(json: &#39;engineCapacity&#39;) { rand( 600..2500 ) } end v = FM[:vehicle].build v.engine_capacity = 125 . and calls to as_json and to_json will report the fieldname as engineCapacity. . v.to_json =&gt; &quot;{ &quot;wheels &quot;:4, &quot;colour &quot;: &quot;blue &quot;, &quot;engineCapacity &quot;:125}&quot; .",
    "url": "http://localhost:4000/usage/json_field_names.html",
    "relUrl": "/usage/json_field_names.html"
  }
  ,"11": {
    "title": "Omitting Fields",
    "content": "Omitting Fields . Sometimes you want a field present, other times you don’t. This is often the case when you want to skip fields which have null or empty values. . FakerMaker.factory :user do name {&#39;Patsy Stone&#39;} email(omit: :nil) {&#39;patsy@fabulous.co.uk&#39;} admin {false} end FM[:user].build.as_json =&gt; {:name=&gt;&quot;Patsy Stone&quot;, :email=&gt;&quot;patsy@fabulous.co.uk&quot;, :admin=&gt;false} FM[:user].build(email: nil).as_json =&gt; {:name=&gt;&quot;Patsy Stone&quot;, :admin=&gt;false} . The omit modifier can take a single value or an array. If it is passed a value and the attribute equals this value, it will not be included in the output from as_json (which returns a Ruby Hash) or in to_json methods. . There are three special modifiers: . :nil (symbol) to omit output when the attribute is set to nil | :empty to omit output when the value is an empty string, an empty array or an empty hash | :always to never output this attribute. | . These can be mixed with real values, e.g. . FakerMaker.factory :user do name {&#39;Patsy Stone&#39;} email(omit: [:nil, :empty, &#39;test@foobar.com&#39;]) {&#39;patsy@fabulous.co.uk&#39;} admin {false} end .",
    "url": "http://localhost:4000/usage/omitting_fields%20copy.html",
    "relUrl": "/usage/omitting_fields%20copy.html"
  }
  
}